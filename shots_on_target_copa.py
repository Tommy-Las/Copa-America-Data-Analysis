# -*- coding: utf-8 -*-
"""shots on target COPA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fsM9-T8q6_tCJoQBf6MyYd71nDe5mu3U
"""

import pandas as pd
import matplotlib.pyplot as plt
from mplsoccer import Pitch
import numpy as np


Home_Team = 'ARGENTINA'
Away_Team = 'CILE'

# ColorCodes for each country for charts
Home_Team_Main_Color = '#5CBFEB'
Home_Team_Secondary_Color = '#FFFFFF'
Home_Team_Third_Color = '#000000'

Away_Team_Main_Color = 'red'
Away_Team_Secondary_Color = '#0033A0'
Away_Team_Third_Color = '#CE1126'

# File about shots and players
# DataFolder = '/content/drive/MyDrive/Egyetem/UCAM/EURO 24 Project/DATOS/events/'
# MatchID = 132630
# Competition = 'copa-america'
# Season = 2024
# DataCollection = 'shots'
# Extension = '.csv'

# # Read the data
# data = pd.read_csv(DataFolder + str(MatchID) + '-' + DataCollection + '-' + Competition + '-' + str(Season) + Extension)

data = pd.read_csv('data/arg-chile-shots.csv')
# Filter the data on teams in case you want to create accumulative analysis
teams_of_interest = [data['Team Name'].unique().tolist()[0], data['Team Name'].unique().tolist()[1]]  # Replace with your team names
filtered_data = data[data['Team Name'].isin(teams_of_interest)]

# Sort on columns you need for the analysis
columns_of_interest = ['Team Name', 'Event Description', 'Start X', 'Start Y', 'End X', 'End Y', 'Shot On Target', 'Intersection Point Norm','Tags']
filtered_data = filtered_data[columns_of_interest]

# Replace values
#filtered_data.replace({'OLANDA': 'The Netherlands', 'INGHILTERRA': 'England'}, inplace=True)

# Define a function to categorize shots
def categorize_shot(tags):
    if 'Goal' in tags:
        return 'Goal'
    elif 'GK Save' in tags:
        return 'Saved'
    elif 'Blocked' in tags: #In Copa all blocked shots have a tag as Deflected. EURO uses Blocked
        return 'Blocked'
    else:
        return 'Off Target'

# Apply the function to create a new column
filtered_data['Shot Type'] = filtered_data['Tags'].apply(categorize_shot)
filtered_data = filtered_data[filtered_data['Event Description']=='Shot']

# Show data
# Print the DataFrame with the new column
# print(filtered_data[['Team Name', 'Start X', 'Start Y', 'End X', 'End Y', 'Shot Type']])

# Calculate team statistics for annotation
teams = filtered_data['Team Name'].unique()
stats = {}

for team in teams:
    team_data = filtered_data[filtered_data['Team Name'] == team]
    total_shots = team_data.shape[0]
    shots_on_target = team_data[team_data['Tags'].str.contains('On Target')].shape[0]
    shots_saved = team_data[team_data['Shot Type'] == 'Saved'].shape[0]
    goals = team_data[team_data['Shot Type'] == 'Goal'].shape[0]

    stats[team] = {
        'Total shots': total_shots,
        'Shots on target': shots_on_target,
        'Shots saved': shots_saved,
        'Shots on target ratio': shots_on_target / total_shots,
        'Shots saved ratio': shots_saved / total_shots,
        'Goals': goals,
        'Goal conversion': goals / total_shots
    }

filtered_data
print(team_data['Tags'].unique())
stats

# Create the pitch
pitch = Pitch(pitch_type='uefa', pitch_color='#2e4237', line_color='white')
dim_x = 105
dim_y = 68
# Create the figure
fig, ax = pitch.draw(figsize=(16, 10))

# Plot Dutch shots on the left side
away_shots = filtered_data[filtered_data['Team Name'] == Away_Team]

pitch.arrows( away_shots['Start X'], dim_y-away_shots['Start Y'],
             away_shots['End X'], dim_y-away_shots['End Y'],
             width=3, headwidth=3, headlength=4, color=Away_Team_Main_Color,
              ax=ax, alpha=0.8,linestyle='-.')

# Allign markers to shot types
for i, shot in away_shots.iterrows():
    if shot['Shot Type'] == 'Goal':
        marker = '*'  # Filled circle marker for goals
        pitch.scatter(shot['Start X'], dim_y-shot['Start Y'], color=Away_Team_Main_Color,
                      edgecolor=Away_Team_Third_Color, s=1600, ax=ax, marker=marker)
    elif shot['Shot Type'] == 'Saved':
        marker = 'o'  # Filled square marker for saved shots
        pitch.scatter(shot['Start X'], dim_y-shot['Start Y'], color=Away_Team_Main_Color,
                      edgecolor=Away_Team_Third_Color, s=800,ax=ax, marker=marker)
    elif shot['Shot Type'] == 'Blocked':
        marker = 's'  # Filled triangle marker for blocked shots
        pitch.scatter(shot['Start X'], dim_y-shot['Start Y'], color=Away_Team_Main_Color,
                      edgecolor=Away_Team_Third_Color, s=800,ax=ax, marker=marker)
    else:
        marker = 'o'  # Filled triangle marker for off-target shots
        pitch.scatter(shot['Start X'], dim_y-shot['Start Y'],  color=Away_Team_Main_Color,
                      edgecolor=Away_Team_Main_Color, s=800,ax=ax, marker=marker,alpha=0.5)

# Add this code to plot the index in the middle of the scatter points for England shots
for i, row in away_shots.iterrows():
    if row['Shot Type'] != 'Blocked':
      ax.text(row['Start X'], dim_y-row['Start Y'], str(i), color=Away_Team_Secondary_Color, ha='center', va='center', fontsize=11, fontweight='bold')

# Plot Home team shots on the right side
home_shots = filtered_data[filtered_data['Team Name'] == Home_Team]
pitch.arrows(dim_x - home_shots['Start X'], home_shots['Start Y'],
             dim_x - home_shots['End X'], home_shots['End Y'],
             width=3, headwidth=3, headlength=4, color=Home_Team_Main_Color,
             ax=ax, alpha=0.8,linestyle='-.')

# Allign markers to shot types
for i, shot in home_shots.iterrows():
    if shot['Shot Type'] == 'Goal':
        marker = '*'  # Filled circle marker for goals
        pitch.scatter(dim_x-shot['Start X'], shot['Start Y'], color=Home_Team_Main_Color,
                      edgecolor=Home_Team_Third_Color, s=1600, ax=ax, marker=marker)
    elif shot['Shot Type'] == 'Saved':
        marker = 'o'  # Filled square marker for saved shots
        pitch.scatter(dim_x-shot['Start X'], shot['Start Y'], color=Home_Team_Main_Color,
                      edgecolor=Home_Team_Third_Color, s=800,ax=ax, marker=marker)
    elif shot['Shot Type'] == 'Blocked':
        marker = 's'  # Filled triangle marker for blocked shots
        pitch.scatter(dim_x-shot['Start X'], shot['Start Y'], color=Home_Team_Main_Color,
                      edgecolor=Home_Team_Third_Color, s=800,ax=ax, marker=marker)
    else:
        marker = 'o'  # Filled triangle marker for off-target shots
        pitch.scatter(dim_x-shot['Start X'], shot['Start Y'],  color=Home_Team_Main_Color,
                      edgecolor=Home_Team_Main_Color, s=800,ax=ax, marker=marker,alpha=0.5)


# Add this code to plot the index in the middle of the scatter points for Dutch shots
for i, row in home_shots.iterrows():
    if row['Shot Type'] != 'Blocked':
      ax.text(dim_x - row['Start X'], row['Start Y'], str(i), color=Home_Team_Third_Color, ha='center', va='center', fontsize=11, fontweight='bold')

# Validate the dimension of the pitch by marking the edge
# pitch.scatter(dim_x, dim_y, color='black', edgecolor='black', s=100, ax=ax)

# Display statistics
left_team_name = Home_Team
left_team_score = stats[Home_Team]['Goals']
left_stats_desc = ["Total shots:", "Shots on target:", "Shots saved:","Goal conversion:"]
left_stats_values = [stats[Home_Team]['Total shots'],
                      f"{stats[Home_Team]['Shots saved']:.0f} ({stats[Home_Team]['Shots saved ratio']* 100:.0f}%)",
                      f"{stats[Home_Team]['Shots on target']:.0f} ({stats[Home_Team]['Shots on target ratio']* 100:.0f}%)",
                      f"{stats[Home_Team]['Goals']:.0f} ({stats[Home_Team]['Goal conversion']* 100:.0f}%)"]
right_team_name = Away_Team
right_team_score = stats[Away_Team]['Goals']
right_stats_desc = ["Total shots:", "Shots on target:", "Shots saved:","Goal conversion:"]
right_stats_values = [stats[Away_Team]['Total shots'],
                      f"{stats[Away_Team]['Shots on target']:.0f} ({stats[Away_Team]['Shots on target ratio']* 100:.0f}%)",
                      f"{stats[Away_Team]['Shots saved']:.0f} ({stats[Away_Team]['Shots saved ratio']* 100:.0f}%)",
                      f"{stats[Away_Team]['Goals']:.0f} ({stats[Away_Team]['Goal conversion']* 100:.0f}%)"]

# Positioning the stats for Home team
plt.text(dim_x/2 -11, dim_y - 4, left_team_name, fontsize=20, ha='center', va='center', fontweight='bold', color='white')
plt.text(dim_x/2 -11, dim_y - 8, left_team_score, fontsize=19, ha='center', va='center', fontweight='bold', color='white')
for i, desc in enumerate(left_stats_desc):
    plt.text(dim_x/2 - 11, dim_y - 12 - i*2, desc, fontsize=14, ha='right', va='center', color='white')
    plt.text(dim_x/2 - 11, dim_y - 12 - i*2, left_stats_values[i], fontsize=14, ha='left', va='center', fontweight='bold', color='white')

# Positioning the stats for Away team
plt.text(dim_x/2 + 16, dim_y - 4, right_team_name, fontsize=20, ha='center', va='center', fontweight='bold', color='white')
plt.text(dim_x/2 + 16, dim_y - 8, right_team_score, fontsize=19, ha='center', va='center', fontweight='bold', color='white')
for i, desc in enumerate(right_stats_desc):
    plt.text(dim_x/2 + 16, dim_y - 12 - i*2, desc, fontsize=14, ha='right', va='center', color='white')
    plt.text(dim_x/2 + 16, dim_y - 12 - i*2, right_stats_values[i], fontsize=14, ha='left', va='center', fontweight='bold', color='white')

# Create custom legend
legend_elements = [plt.Line2D([0], [0], marker='*',color='g',markerfacecolor='white',markersize=10,label='Goal'),
    plt.Line2D([0], [0], marker='o',color='g',markerfacecolor='white',markeredgewidth=2, markersize=10,label='Saved'),
    plt.Line2D([0], [0], marker='s',color='g',
               markerfacecolor='white', markersize=10,
               label='Blocked'),
    plt.Line2D([0], [0], marker='o', color='g',
               markerfacecolor='white', markersize=10,
               label='Off target',alpha=0.5), # Ensure consistent indentation for all elements
]

# Add legend to the plot
leg = plt.legend(handles=legend_elements, loc='lower right',
                 fontsize=12, labelcolor='white')
leg.get_frame().set_facecolor('#22312b')
# Set title
plt.title('Shot Analysis: ' + Home_Team + ' vs ' + Away_Team, fontsize=20, fontweight='bold')

# Save the plot
plt.savefig('Shot Analysis: '+ Home_Team +' vs ' + Away_Team +'.png', dpi=400)

# Show the plot
plt.show()

"""#Shot map on target"""

import matplotlib.pyplot as plt
import pandas as pd
from PIL import Image

goal_dim_x = 7.32
goal_dim_y = 2.44
view_dim_x_start = 25
view_dim_x_end = 43
view_dim_y_start = -1
view_dim_y_end = 4

filtered_data # Split the 'Intersection Point Norm' column into 'x' and 'y' columns
filtered_data[['x', 'y','z']] = filtered_data['Intersection Point Norm'].str.split(';', expand=True)
filtered_data['x'] = pd.to_numeric(filtered_data['x'])
filtered_data['y'] = pd.to_numeric(filtered_data['y'])
filtered_data['z'] = pd.to_numeric(filtered_data['z'])
filtered_data_on_target = filtered_data[(filtered_data['y'] >= view_dim_x_start) & (filtered_data['y'] <= view_dim_x_end) &
                                      (filtered_data['z'] >= view_dim_y_start) & (filtered_data['z'] <= view_dim_y_end)]
shot_fields = ['Team Name','Shot Type','y', 'z' ]
data_shots = filtered_data_on_target[shot_fields]
data_shots = data_shots[data_shots['Shot Type'].isin(['Goal', 'Saved','Off Target'])]
print(data_shots)

# Save the DataFrame to a CSV file

# DeliveryFolder='/content/drive/MyDrive/Egyetem/UCAM/EURO 24 Project/Data for visuals'
# csv_path = DeliveryFolder+'shot_data.csv'  # Specify your desired file path
# data_shots.to_csv(csv_path, index=False)

"""Create goal plot view"""

import matplotlib.pyplot as plt

# Dimensions of the football pitch in meters
pitch_width = 68    # y coordinates, width

# Dimensions of the goal in meters
goal_width = 7.32   # Width
goal_height = 2.44  # Height

# Coordinates of the middle of the pitch
goal_center_x = pitch_width / 2

# Set size of the goal
fig, ax = plt.subplots(figsize=(22, 12 / 2))

# Set background color of the goal
ax.patch.set_facecolor('grey')

# Draw goal line of the goal
goal_line = plt.Rectangle((goal_center_x - goal_width / 2, 0), goal_width, goal_height,
                          linewidth=1, edgecolor='white', facecolor='none', hatch= '++', alpha = 0.3)
ax.add_patch(goal_line)

# Draw posts of the goal
left_post = plt.Rectangle((goal_center_x - goal_width / 2, 0), 0.1, goal_height,
                          linewidth=1, edgecolor='white', facecolor='white' )
right_post = plt.Rectangle((goal_center_x + goal_width / 2 - 0.1, 0), 0.1, goal_height,
                           linewidth=1, edgecolor='white', facecolor='white')
top_post = plt.Rectangle((goal_center_x - goal_width / 2, goal_height), goal_width, 0.1,
                         linewidth=1, edgecolor='white', facecolor='white')
ax.add_patch(left_post)
ax.add_patch(right_post)
ax.add_patch(top_post)

# Track whether labels have been added
goal_label_added = False
saved_label_added = False
off_target_label_added = False

# Plot England shots on the right side
Home_Shots = data_shots[data_shots['Team Name'] == Home_Team]

# Plot Goals
Home_goals = Home_Shots[Home_Shots['Shot Type'] == 'Goal']
ax.scatter(Home_goals['y'], Home_goals['z'], color=Home_Team_Main_Color,
            edgecolor=Home_Team_Third_Color, s=1600, marker='*', label='Goals (' + Home_Team + ')')
for i, shot in Home_goals.iterrows():
    ax.text(shot['y'], shot['z'], str(i), color=Home_Team_Secondary_Color, ha='center', va='center', fontsize=11, fontweight='bold')

# Plot Saved Shots
Home_saved = Home_Shots[Home_Shots['Shot Type'] == 'Saved']
ax.scatter(Home_saved['y'], Home_saved['z'], color=Home_Team_Main_Color,
            edgecolor=Home_Team_Third_Color, s=800, marker='o', label='Saved (' + Home_Team + ')')
for i, shot in Home_saved.iterrows():
    ax.text(shot['y'], shot['z'], str(i), color=Home_Team_Secondary_Color, ha='center', va='center', fontsize=11, fontweight='bold')

# Plot Off-Target Shots
Home_off_target = Home_Shots[Home_Shots['Shot Type'] == 'Off Target']
ax.scatter(Home_off_target['y'], Home_off_target['z'],  color=Home_Team_Main_Color,
            edgecolor=Home_Team_Main_Color, s=800, marker='o', alpha=0.5, label='Off target (' + Home_Team + ')')
for i, shot in Home_off_target.iterrows():
    ax.text(shot['y'], shot['z'], str(i), color=Home_Team_Secondary_Color, ha='center', va='center', fontsize=11, fontweight='bold')

# Plot Dutch shots on the right side
# Away_Shots = data_shots[data_shots['Team Name'] == Away_Team]

# # Plot Goals
# dutch_goals = Away_Shots[Away_Shots['Shot Type'] == 'Goal']
# ax.scatter(dutch_goals['y'], dutch_goals['z'], color=Away_Team_Main_Color,
#             edgecolor=Away_Team_Third_Color, s=1600, marker='*', label='Goals (' + Away_Team + ')')
# for i, shot in dutch_goals.iterrows():
#     ax.text(shot['y'], shot['z'], str(i), color=Away_Team_Secondary_Color, ha='center', va='center', fontsize=11, fontweight='bold')

# # Plot Saved Shots
# dutch_saves = Away_Shots[Away_Shots['Shot Type'] == 'Saved']
# ax.scatter(dutch_saves['y'], dutch_saves['z'], color=Away_Team_Main_Color,
#             edgecolor=Away_Team_Third_Color, s=800, marker='o', label='Saved (' + Away_Team + ')')
# for i, shot in dutch_saves.iterrows():
#     ax.text(shot['y'], shot['z'], str(i), color=Away_Team_Secondary_Color, ha='center', va='center', fontsize=11, fontweight='bold')

# # Plot Off-Target Shots
# dutch_off_target = Away_Shots[Away_Shots['Shot Type'] == 'Off Target']
# ax.scatter(dutch_off_target['y'], dutch_off_target['z'],  color=Away_Team_Main_Color,
#             edgecolor=Away_Team_Main_Color, s=800, marker='o', alpha=0.5, label='Off target (' + Away_Team + ')')

# for i, shot in dutch_off_target.iterrows():
#     ax.text(shot['y'], shot['z'], str(i), color=Away_Team_Secondary_Color, ha='center', va='center', fontsize=11, fontweight='bold')

# Set axis limits and appearance equal
ax.set_xlim(view_dim_x_start, view_dim_x_end)
ax.set_ylim(view_dim_y_start, view_dim_y_end)
ax.set_aspect('equal')

# Labels and title
ax.set_title("Argentina's Shot map")

# Create custom legend elements for each team
home_legend_elements = [
    plt.Line2D([0], [0], marker='*', color=Home_Team_Third_Color, markerfacecolor=Home_Team_Main_Color, markersize=10, label='Goal'),
    plt.Line2D([0], [0], marker='o', color=Home_Team_Third_Color, markerfacecolor=Home_Team_Main_Color, markeredgewidth=2, markersize=10, label='Saved'),
    plt.Line2D([0], [0], marker='o', color=Home_Team_Main_Color, markerfacecolor=Home_Team_Main_Color, markersize=10, label='Off target', alpha=0.5)
]

away_legend_elements = [
    plt.Line2D([0], [0], marker='*', color=Away_Team_Third_Color, markerfacecolor=Away_Team_Main_Color, markersize=10, label='Goal'),
    plt.Line2D([0], [0], marker='o', color=Away_Team_Third_Color, markerfacecolor=Away_Team_Main_Color, markeredgewidth=2, markersize=10, label='Saved'),
    plt.Line2D([0], [0], marker='o', color=Away_Team_Main_Color, markerfacecolor=Away_Team_Main_Color, markersize=10, label='Off target', alpha=0.5)
]

# Add legends to the plot in two columns
leg1 = plt.legend(handles=home_legend_elements, loc='lower right', title=Home_Team, title_fontsize=12, bbox_to_anchor=(0.35, 0))
#leg2 = plt.legend(handles=away_legend_elements, loc='lower right', title=Away_Team, title_fontsize=12, bbox_to_anchor=(0.65, 0))
ax.add_artist(leg1)

# Adjust the layout to avoid cutting the labels
plt.tight_layout()

# Show the graph


plt.grid(False)  # Disable the grid

# Remove x-axis and y-axis numbers
ax.set_xlabel('')
ax.set_ylabel('')

# plt.savefig(deliveryfolder + 'Shot Map: '+ Home_Team + ' vs ' + Away_Team + '.png', dpi=400)
# plt.savefig(deliveryfolder + 'Shot Map: '+ Home_Team + ' vs ' + Away_Team + '_trans.png', dpi=400, transparent=True)
plt.show()

